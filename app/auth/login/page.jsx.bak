"use client";

import { useState, useEffect, useRef } from 'react';
import { signIn } from 'next-auth/react';
import { useRouter } from 'next/navigation';

export default function Login() {
  const router = useRouter();
  const [isActive, setIsActive] = useState(false);
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  
  // Refs for animation elements
  const containerRef = useRef(null);
  const animateRef = useRef(null);
  const animate2Ref = useRef(null);
  
  const handleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    
    try {
      const result = await signIn('credentials', {
        redirect: false,
        email,
        password,
      });
      
      if (result?.error) {
        setError('خطأ في تسجيل الدخول، يرجى التحقق من بريدك الإلكتروني وكلمة المرور');
      } else {
        setSuccess('تم تسجيل الدخول بنجاح! جاري التحويل...');
        setTimeout(() => {
          router.push('/');
        }, 1500);
      }
    } catch (error) {
      setError('حدث خطأ أثناء تسجيل الدخول، يرجى المحاولة مرة أخرى');
      console.error('Login error:', error);
    } finally {
      setLoading(false);
    }
  };
  
  // Handle Google Sign In
  const handleGoogleSignIn = async () => {
    setLoading(true);
    setError('');
    try {
      await signIn('google', { callbackUrl: '/' });
      // Note: Google provider redirects automatically,
      // so we don't need to handle success state here
    } catch (error) {
      setError('حدث خطأ أثناء تسجيل الدخول باستخدام Google');
      console.error('Google login error:', error);
      setLoading(false);
    }
  };

  const handleSignup = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    
    if (!name || !email || !password) {
      setError('يرجى ملء جميع الحقول المطلوبة');
      setLoading(false);
      return;
    }
    
    try {
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name, email, password }),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'خطأ في التسجيل');
      }
      
      setSuccess('تم إنشاء الحساب بنجاح! جاري تسجيل الدخول...');
      
      // Auto login after successful registration
      setTimeout(async () => {
        await signIn('credentials', {
          redirect: false,
          email,
          password,
        });
        router.push('/');
      }, 1500);
      
    } catch (error) {
      setError(error.message || 'حدث خطأ أثناء التسجيل');
      console.error('Signup error:', error);
    } finally {
      setLoading(false);
    }
  };

  const toggleForm = () => {
    setIsActive(!isActive);
  };

  // Enhanced animation effects with refs
  useEffect(() => {
    // Add boxicons CSS
    const link = document.createElement('link');
    link.href = 'https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css';
    link.rel = 'stylesheet';
    document.head.appendChild(link);
    
    // Enhanced animation for the container
    if (containerRef.current) {
      containerRef.current.classList.add('opacity-0');
      setTimeout(() => {
        containerRef.current.classList.remove('opacity-0');
        containerRef.current.classList.add('opacity-100');
        containerRef.current.classList.add('animate-fadeIn');
      }, 200);
    }
    
    // Enhanced animation for the background elements
    if (animateRef.current && animate2Ref.current) {
      if (isActive) {
        animateRef.current.style.transform = 'rotate(0deg) skewY(0deg)';
        animateRef.current.style.transition = 'transform 1.2s cubic-bezier(0.34, 1.56, 0.64, 1)';
        animate2Ref.current.style.transform = 'rotate(0deg) skewY(0deg)';
        animate2Ref.current.style.transition = 'transform 1.2s cubic-bezier(0.34, 1.56, 0.64, 1)';
        animateRef.current.style.transform = 'left: 0';
        
      } else {
        animateRef.current.style.transform = 'rotate(10deg) skewY(40deg)';
        animateRef.current.style.transition = 'transform 1.2s cubic-bezier(0.34, 1.56, 0.64, 1)';
        animate2Ref.current.style.transform = 'rotate(0deg) skewY(0deg)';
        animate2Ref.current.style.transition = 'transform 1.2s cubic-bezier(0.34, 1.56, 0.64, 1)';
      }
    }
    
    return () => {
      document.head.removeChild(link);
    };
  }, [isActive]);

  return (
    <div className="flex items-center justify-center min-h-screen bg-midNight-950 font-sans">
      <div 
        ref={containerRef}
        className={`relative w-[950px] h-[600px] rounded-[20px] border-2 border-[#0ef] shadow-[0_0_25px_#0ef] overflow-hidden bg-transparent transition-all duration-500 ${isActive ? 'transform' : ''} hover:shadow-[0_0_35px_rgba(0,238,255,0.6)]`}
      >
        {/* Notification messages */}
        {error && (
          <div className="absolute top-4 left-1/2 transform -translate-x-1/2 z-50 bg-red-500/90 text-white px-4 py-2 rounded-md min-w-[200px] text-center">
            {error}
          </div>
        )}
        {success && (
          <div className="absolute top-4 left-1/2 transform -translate-x-1/2 z-50 bg-green-500/90 text-white px-4 py-2 rounded-md min-w-[200px] text-center">
            {success}
          </div>
        )}
        
        {/* Animated spans with refs for enhanced animation */}
        <span 
          ref={animateRef}
          className="absolute top-[-4px] right-0 w-[950px] h-[700px] bg-gradient-to-tr from-midNight-950 to-primSky-500 border-b-[3px] border-[#0ef] transform origin-bottom-right transition-transform duration-1500 delay-[1600ms] rotate-[10deg] skew-y-[40deg]"
        ></span>
        <span 
          ref={animate2Ref}
          className="absolute top-full left-[250px] w-[850px] h-[700px] bg-midNight-950 border-t-[3px] border-[#0ef] transform origin-bottom-left transition-transform duration-1500 delay-500"
        ></span>

      {/* Signup Box */}
      <div className={`absolute top-0 right-0 h-full w-1/2 flex flex-col justify-center px-[40px] pl-[60px] ${isActive ? 'opacity-100 translate-x-0 blur-0 transition-all duration-700' : 'opacity-0 translate-x-[120%] blur-md transition-all duration-700'}`}>
        <h2 className={`text-3xl text-white text-center mb-6 ${isActive ? 'transition-all duration-700' : 'transition-all duration-700'}`}>Sign Up</h2>
        <form onSubmit={handleSignup} className="w-full">
          <div className={`relative w-full h-[50px] my-6 ${isActive ? 'transition-all duration-700' : 'transition-all duration-700'}`}>
            <input 
              type="text" 
              required 
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="h-full w-full outline-none border-b-2 border-white focus:border-[#0ef] hover:border-[#0ef] bg-transparent transition-all duration-500 text-white text-base font-medium pr-6"
              disabled={loading}
            />
            <label className="absolute top-1/2 left-0 -translate-y-1/2 text-base pointer-events-none text-white transition-all duration-500 peer-focus:-top-[5px] peer-focus:text-[#0ef] peer-hover:-top-[5px] peer-hover:text-[#0ef]">Username</label>
            <i className='bx bx-user absolute top-1/2 right-0 -translate-y-1/2 transition-colors duration-500 text-white'></i>
          </div>
          <div className={`relative w-full h-[50px] my-6 ${isActive ? 'transition-all duration-700' : 'transition-all duration-700'}`}>
            <input 
              type="email" 
              required
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="h-full w-full outline-none border-b-2 border-white focus:border-[#0ef] hover:border-[#0ef] bg-transparent transition-all duration-500 text-white text-base font-medium pr-6"
              disabled={loading}
            />
            <label className="absolute top-1/2 left-0 -translate-y-1/2 text-base pointer-events-none text-white transition-all duration-500 peer-focus:-top-[5px] peer-focus:text-[#0ef] peer-hover:-top-[5px] peer-hover:text-[#0ef]">Email</label>
            <i className='bx bxs-envelope absolute top-1/2 right-0 -translate-y-1/2 transition-colors duration-500 text-white'></i>
          </div>
          <div className={`relative w-full h-[50px] my-6 ${isActive ? 'transition-all duration-700' : 'transition-all duration-700'}`}>
            <input 
              type="password" 
              required
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="h-full w-full outline-none border-b-2 border-white focus:border-[#0ef] hover:border-[#0ef] bg-transparent transition-all duration-500 text-white text-base font-medium pr-6"
              disabled={loading}
            />
            <label className="absolute top-1/2 left-0 -translate-y-1/2 text-base pointer-events-none text-white transition-all duration-500 peer-focus:-top-[5px] peer-focus:text-[#0ef] peer-hover:-top-[5px] peer-hover:text-[#0ef]">Password</label>
            <i className='bx bxs-lock absolute top-1/2 right-0 -translate-y-1/2 transition-colors duration-500 text-white'></i>
          </div>
          <button 
            type="submit" 
            className="w-full h-[45px] bg-gradient-to-r from-primSky-300 to-primSky-500 rounded-[10px] text-white text-lg font-semibold transition-all duration-500 hover:shadow-[0_0_10px_#0ef] disabled:opacity-70 disabled:cursor-not-allowed"
            disabled={loading}
          >
            {loading ? 'Signing up...' : 'Sign Up'}
          </button>
          <button 
            type="button" 
            onClick={handleGoogleSignIn}
            disabled={loading}
            className="flex items-center justify-center w-full h-[45px] mt-4 rounded-[10px] transition-all duration-300 bg-white hover:bg-gray-200 text-gray-700 disabled:opacity-70 disabled:cursor-not-allowed group"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="inline w-5 h-5 mr-2 transition-transform duration-300 group-hover:scale-110" viewBox="0 0 48 48">
              <path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"/>
              <path fill="#FF3D00" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"/>
              <path fill="#4CAF50" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"/>
              <path fill="#1976D2" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"/>
            </svg>
            <span className="transition-all duration-300 group-hover:font-bold">Sign up with Google</span>
          </button>

          <div className="mt-4 text-center text-white">
            <p>Already have an account? <a href="#" onClick={(e) => { e.preventDefault(); toggleForm(); }} className="text-[#0ef] hover:underline">login</a></p>
          </div>
        </form>
      </div>

      {/* Login Box */}
      <div className={`absolute top-0 left-0 h-full w-1/2 flex flex-col justify-center px-[40px] pr-[60px] ${isActive ? 'opacity-0 -translate-x-[120%] blur-md transition-all duration-700' : 'opacity-100 translate-x-0 blur-0 transition-all duration-700'}`}>
        <h2 className={`text-3xl text-white text-center mb-6 ${isActive ? 'transition-all duration-700' : 'transition-all duration-700'}`}>login</h2>
        <form onSubmit={handleLogin} className="w-full">
          <div className={`relative w-full h-[50px] my-6 ${isActive ? 'transition-all duration-700' : 'transition-all duration-700'}`}>
            <input 
              type="text" 
              required 
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="h-full w-full outline-none border-b-2 border-white focus:border-[#0ef] hover:border-[#0ef] bg-transparent transition-all duration-500 text-white text-base font-medium pr-6"
              disabled={loading}
            />
            <label className="absolute top-1/2 left-0 -translate-y-1/2 text-base pointer-events-none text-white transition-all duration-500 peer-focus:-top-[5px] peer-focus:text-[#0ef] peer-hover:-top-[5px] peer-hover:text-[#0ef]">Email</label>
            <i className='bx bxs-envelope absolute top-1/2 right-0 -translate-y-1/2 transition-colors duration-500 text-white'></i>
          </div>
          <div className={`relative w-full h-[50px] my-6 ${isActive ? 'transition-all duration-700' : 'transition-all duration-700'}`}>
            <input 
              type="password" 
              required
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="h-full w-full outline-none border-b-2 border-white focus:border-[#0ef] hover:border-[#0ef] bg-transparent transition-all duration-500 text-white text-base font-medium pr-6"
              disabled={loading}
            />
            <label className="absolute top-1/2 left-0 -translate-y-1/2 text-base pointer-events-none text-white transition-all duration-500 peer-focus:-top-[5px] peer-focus:text-[#0ef] peer-hover:-top-[5px] peer-hover:text-[#0ef]">Password</label>
            <i className='bx bxs-lock absolute top-1/2 right-0 -translate-y-1/2 transition-colors duration-500 text-white'></i>
          </div>
          <button 
            type="submit" 
            className="w-full h-[45px] bg-gradient-to-r from-primSky-300 to-primSky-500 rounded-[10px] text-white text-lg font-semibold transition-all duration-500 hover:shadow-[0_0_10px_#0ef] disabled:opacity-70 disabled:cursor-not-allowed"
            disabled={loading}
          >
            {loading ? 'Logging in...' : 'Login'}
          </button>
          <button 
            type="button" 
            onClick={handleGoogleSignIn}
            disabled={loading}
            className="flex items-center justify-center w-full h-[45px] mt-4 rounded-[10px] transition-all duration-300 bg-white hover:bg-gray-200 text-gray-700 disabled:opacity-70 disabled:cursor-not-allowed group"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="inline w-5 h-5 mr-2 transition-transform duration-300 group-hover:scale-110" viewBox="0 0 48 48">
              <path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"/>
              <path fill="#FF3D00" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"/>
              <path fill="#4CAF50" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"/>
              <path fill="#1976D2" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"/>
            </svg>
            <span className="transition-all duration-300 group-hover:font-bold">Sign in with Google</span>
          </button>

          <div className="mt-4 text-center text-white">
            <p>Don't have an account? <a href="#" onClick={(e) => { e.preventDefault(); toggleForm(); }} className="text-[#0ef] hover:underline">signup</a></p>
          </div>
        </form>
      </div>

      {/* Login Text */}
      <div className={`absolute top-0 right-0 h-full w-1/2 flex flex-col justify-center text-right pr-[40px] pb-[60px] pl-[150px] ${isActive ? 'opacity-0 translate-x-[120%] blur-md transition-all duration-700' : 'opacity-100 translate-x-0 blur-0 transition-all duration-700'}`}>
        <h2 className={`text-4xl text-white leading-tight uppercase ${isActive ? 'transition-all duration-700' : 'transition-all duration-700'}`}>مرحباً بعودتك!</h2>
        <p className={`text-white text-base ${isActive ? 'transition-all duration-700' : 'transition-all duration-700'}`}>يسعدنا رؤيتك مرة أخرى في منصتنا التعليمية</p>
      </div>
      
        </form>
      </div>

      {/* Welcome Text - Left Side */}
      <div className={`absolute top-0 right-0 w-1/2 h-full flex flex-col justify-center items-center text-center px-[40px] ${isActive ? 'translate-x-0 transition-all duration-700' : 'translate-x-0 transition-all duration-700'}`}>
        <h2 className={`text-4xl text-white font-bold mb-2 ${isActive ? 'transition-all duration-700' : 'transition-all duration-700'}`}>WELCOME BACK!</h2>
        <p className={`text-white text-base mb-1 ${isActive ? 'transition-all duration-700' : 'transition-all duration-700'}`}>Hello, my name is</p>
        <p className={`text-white text-base mb-1 ${isActive ? 'transition-all duration-700' : 'transition-all duration-700'}`}>Ahmed. I'm a web</p>
        <p className={`text-white text-base ${isActive ? 'transition-all duration-700' : 'transition-all duration-700'}`}>developer.</p>
      </div>
            <p>لديك حساب بالفعل؟ <a href="#" onClick={toggleForm} className="text-[#0ef] font-semibold hover:underline transition-all duration-300 hover:text-[#9fe3f9]">تسجيل الدخول</a></p>
          </div>
        </form>
      </div>

      {/* Register Text */}
      <div className={`absolute top-0 left-0 h-full w-1/2 flex flex-col justify-center text-left pl-[40px] pb-[60px] pr-[150px] pointer-events-none ${isActive ? 'opacity-100 translate-x-0 blur-0 transition-all duration-700' : 'opacity-0 -translate-x-[135%] transition-all duration-700'}`}>
        <h2 className={`text-4xl text-white leading-tight uppercase ${isActive ? 'transition-all duration-700' : 'transition-all duration-700'}`}>أهلاً بك!</h2>
        <p className={`text-white text-base ${isActive ? 'transition-all duration-700' : 'transition-all duration-700'}`}>نحن سعداء بانضمامك إلى مجتمعنا التعليمي</p>
      </div>
    </div>
    </div>
  );
}